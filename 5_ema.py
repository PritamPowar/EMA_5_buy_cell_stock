# -*- coding: utf-8 -*-
"""5_ema.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Srr1CuBmSBWuE5j2xhsDmPFdDKgIaMB3
"""

pip install ta

pip install mplfinance

import pandas as pd
import numpy as np
# yfinance to fetch data
import yfinance as yf
#to import EMA indicator
from ta.trend import EMAIndicator
#to plot graph
import matplotlib.pyplot as plt
import mplfinance as mpf
import seaborn as sns
# KNN model
from sklearn.neighbors import KNeighborsClassifier
#random forest Classifer
from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import accuracy_score, classification_report
# to split data into train test split for training and testing
from sklearn.model_selection import train_test_split

# deep learing useing keras regressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
#deep learing
from sklearn import metrics

"""Ticket of nifty to importing data from yahoo finance.
1 month data is imported with interval of 2 minutes.

note -ERROR:yfinance:['^NSEI']: YFChartError('%ticker%: Invalid input - interval=3m is not supported. Valid intervals: [1m, 2m, 5m, 15m, 30m, 60m, 90m, 1h, 1d, 5d, 1wk, 1mo, 3mo]')
"""

ticker = "^NSEI"
data = yf.download(ticker, period="1mo", interval="2m")

data.head()

print(data.iloc[1:10])

#Checking for null values
data.isna().sum()

"""Adding new column for EMA value into data.
"ta" library is used for EMA indicator.
EMA - Exponantial moving average.
"""

ema_period = 5
ema = EMAIndicator(close=data['Close'], window=ema_period, fillna=True)
data['EMA'] = ema.ema_indicator()

data.head()

"""new signal column is created.
0 means hold, 1 means buy. -1 means sell

"""

data['Signal'] = 0  # 0 means hold, 1 means buy, -1 means sell
data.loc[data['Close'] > data['EMA'], 'Signal'] = 1  # Buy signal
data.loc[data['Close'] < data['EMA'], 'Signal'] = -1  # Sell signal

data

print(data.iloc[90:100])

# excel_file = 'data_output.xlsx'
# data.to_excel(excel_file, index=False)

data.index = pd.date_range('2024-07-01', periods=len(data), freq='2T')

# Plot candlestick chart
mpf.plot(data, type='candle', style='charles', ylabel='Price', ylabel_lower='Volume', figscale=2.0)

# Overlay EMA
plt.plot(data.index, data['EMA'], label='EMA', color='blue')

# Plot arrows for signals
buy_signals = data[data['Signal'] == 1]
sell_signals = data[data['Signal'] == -1]
plt.scatter(buy_signals.index, buy_signals['Low'] - 100, marker='^', color='g', label='Buy Signal', zorder=5)
plt.scatter(sell_signals.index, sell_signals['High'] + 100, marker='v', color='r', label='Sell Signal', zorder=5)

# Display plot
plt.legend()
plt.title('Stock Price with EMA and Buy/Sell Signals')
plt.show()

# Set index as datetime
data.index = pd.date_range('2024-07-01', periods=len(data), freq='2T')

# Plotting with matplotlib and mplfinance
fig, ax = plt.subplots(figsize=(14, 7))

# Plot candlestick chart
ax.plot(data.index, data['Close'], label='Close', color='black', linestyle='-', linewidth=0.5)
ax.fill_between(data.index, data['Open'], data['Close'], where=data['Close'] >= data['Open'], facecolor='green', edgecolor='green', alpha=0.5)
ax.fill_between(data.index, data['Open'], data['Close'], where=data['Close'] < data['Open'], facecolor='red', edgecolor='red', alpha=0.5)

# Overlay EMA
ax.plot(data.index, data['EMA'], label='EMA', color='blue')

# Plot arrows for signals
buy_signals = data[data['Signal'] == 1]
sell_signals = data[data['Signal'] == -1]
ax.scatter(buy_signals.index, buy_signals['Low'] - 100, marker='^', color='g', label='Buy Signal', zorder=5)
ax.scatter(sell_signals.index, sell_signals['High'] + 100, marker='v', color='r', label='Sell Signal', zorder=5)

# Format plot
ax.legend()
ax.set_title('Stock Price with EMA and Buy/Sell Signals')
ax.set_xlabel('Date')
ax.set_ylabel('Price')

# Show plot
plt.show()

data['Close_vs_EMA'] = (data['Close'] - data['EMA']) / data['Close']

data['Target'] = np.where(data['Signal'] == 1, 1, np.where(data['Signal'] == -1, -1, 0))

"""feature selection
here taret is signals.
"""

features = ['Close', 'EMA', 'Close_vs_EMA']
X = data[features]
y = data['Target']

"""spliting data for train test split 80% for training and 20 % for testing"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""random forest regresor"""

rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

"""accuracy calculation"""

rf_pred = rf_model.predict(X_test)
rf_accuracy = accuracy_score(y_test, rf_pred)
print("\nRandomForest Accuracy:", rf_accuracy)
print(classification_report(y_test, rf_pred))

"""we got 99% accuracy from random forest regresser

k-nearest neighbors regresser
"""

knn_model = KNeighborsClassifier(n_neighbors=5)
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)

"""accuracy check"""

knn_model.fit(X_train, y_train)
knn_pred = knn_model.predict(X_test)
knn_accuracy = accuracy_score(y_test, knn_pred)
print("\nKNN Accuracy:", knn_accuracy)
print(classification_report(y_test, knn_pred))

"""we got 94% accuracy using KNN regresser

keras regresser
"""

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    Dropout(0.2),
    Dense(32, activation='relu'),
    Dropout(0.2),
    Dense(1)  # Output layer (1 neuron for regression output)
])

model.compile(optimizer=Adam(learning_rate=0.001), loss='mean_squared_error')

history = model.fit(X_train_scaled, y_train, epochs=50, batch_size=32, validation_data=(X_test_scaled, y_test), verbose=1)

plt.figure(figsize=(8,4))
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Test Loss')
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epochs')
plt.legend(loc='upper right')

plt.show()

y_pred = model.predict(X_test_scaled)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse:.2f}")

"""as mean squared error is 0.01 is very less i.e. more acurate
as actual and predicted values is showing very less error.

"""

dnn_acc = metrics.r2_score(y_pred, y_test)*100
print("Deep Neural Network accuracy - ",dnn_acc)

"""deep learning - deep neural network accuracy is 98.88 %

"""

#comparing accuracy of all the models
acc = {'model':['random forest','KNN','Deep neural network'],'accuracy':[rf_accuracy*100,knn_accuracy*100,dnn_acc]}

acc_df = pd.DataFrame(acc)
acc_df

#comparing accuracy of all the models

plt.figure(figsize=(10,8))
sns.barplot(x='model',y='accuracy',data=acc_df)
plt.show()

"""random forest regressor gives high accuracy

"""